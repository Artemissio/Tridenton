@typeparam T where T : class

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inherits UIDatagridBase

@inject IJSRuntime Js
@inject ProtectedLocalStorage LocalStorage

@if (_settingsPopupVisible)
{
    <UIPopup>
        <div class="tridenton-ui-datagrid-preferences-container">
            <UIForm Model="_preferences" Header="Preferences">
                <HeaderTemplate>
                    <UIRow FlexVariant="UIFlexVariant.AlignItemsCenter | UIFlexVariant.JustifyContentSpaceBetween">
                        <UIFormDefaultHeader Header="Preferences" />
                        <UIButton Variant="UIButtonVariant.IconInverted" Text="Close" OnClick="() => _settingsPopupVisible = false">
                            <UICloseIcon/>
                        </UIButton>
                    </UIRow>
                </HeaderTemplate>
                
                <ContentTemplate>
                    <UIFormField Label="Page size" Description="Amount of items per page">
                        <InputRadioGroup TValue="int" @bind-Value="_preferences!.PageSize">
                            <UIRow Class="gap" FlexVariant="UIFlexVariant.AlignItemsCenter">
                                <InputRadio Value="25" />
                                <label>25</label>
                            </UIRow>
                            <UIRow Class="gap" FlexVariant="UIFlexVariant.AlignItemsCenter">
                                <InputRadio Value="50" />
                                <label>50</label>
                            </UIRow>
                            <UIRow Class="gap" FlexVariant="UIFlexVariant.AlignItemsCenter">
                                <InputRadio Value="100" />
                                <label>100</label>
                            </UIRow>
                        </InputRadioGroup>
                    </UIFormField>
                    
                    <UIFormField Label="Columns" Description="Select visible columns">
                        <UIColumn>
                            @foreach (var header in Headers)
                            {
                                <UIRow Class="gap" FlexVariant="UIFlexVariant.AlignItemsCenter">
                                    <input type="checkbox" checked="@header.Visible" @oninput="(args) => ChangeColumnVisibility(header, (bool)args.Value!)" disabled="@header.CanNotBeHidden" />
                                    @* <InputCheckbox Value="@header.Visible" *@
                                    @*                ValueExpression="() => header.Visible" *@
                                    @*                ValueChanged="visible => ChangeColumnVisibility(header, visible)" *@
                                    @*                disabled="@header.CanNotBeHidden"/> *@
                                    <label>@header.Label</label>
                                </UIRow>
                            }
                        </UIColumn>
                    </UIFormField>
                </ContentTemplate>
                
                <ControlsTemplate>
                    <UIRow Class="gap" FlexVariant="UIFlexVariant.AlignItemsCenter | UIFlexVariant.JustifyContentEnd">
                        <UIButton Variant="UIButtonVariant.Default" Text="Cancel" OnClick="() => _settingsPopupVisible = false" />
                        <UIButton Variant="UIButtonVariant.Primary" Text="Confirm" OnClick="SavePreferencesAsync" />
                    </UIRow>
                </ControlsTemplate>
            </UIForm>
        </div>
    </UIPopup>
}

<CascadingValue Value="this">
    <div id="@Id" class="@ClassList" style="@Style" @attributes="Attributes">
        <UIColumn Class="gap">
            <div class="tridenton-ui-datagrid-header">

            </div>

            <div class="tridenton-ui-datagrid-controls">
                <UIGrid Columns="2" Rows="1">
                    @if (Controls is null)
                    {
                        <div></div>
                    }
                    else
                    {
                        @Controls
                    }

                    <UIRow Class="gap justify-content-end">
                        <div class="tridenton-ui-datagrid-controls-pagination">

                        </div>

                        <UIButton Variant="UIButtonVariant.Icon" Text="Refresh" Disabled="Loading" OnClick="LoadItemsAsync">
                            <UIRefreshIcon />
                        </UIButton>
                        
                        <UIButton Variant="UIButtonVariant.Icon" Disabled="Loading" Text="Settings" OnClick="() => _settingsPopupVisible = true">
                            <UISettingsIcon />
                        </UIButton>
                    </UIRow>
                </UIGrid>
            </div>

            <div class="tridenton-ui-datagrid-table-container">
                <table data-grid-id="@Id" class="tridenton-ui-datagrid-table">
                    <thead>
                        <tr>
                            @switch (Variant)
                            {
                                case UIDatagridVariant.Select:
                                    <th class="tridenton-ui-datagrid-selection-column"></th>
                                    break;

                                case UIDatagridVariant.MultiSelect:
                                    <th class="tridenton-ui-datagrid-selection-column">
                                        @{
                                            UIThreeStatesCheckboxState checkboxState;

                                            if (_allSelected)
                                            {
                                                checkboxState = UIThreeStatesCheckboxState.On;
                                            }
                                            else
                                            {
                                                checkboxState = _anySelected
                                                    ? UIThreeStatesCheckboxState.Middle
                                                    : UIThreeStatesCheckboxState.Off;
                                            }
                                        }

                                        <UIThreeStatesCheckbox State="checkboxState"
                                                               Disabled="@Loading"
                                                               SwitchFormOnState="DeselectAllRowsAsync"
                                                               SwitchFormMiddleState="SelectAllRowsAsync"
                                                               SwitchFormOffState="SelectAllRowsAsync" />
                                    </th>
                                    break;

                                case UIDatagridVariant.Default:
                                    break;

                                default:
                                    throw new InvalidEnumArgumentException(nameof(Variant));
                            }

                            @TableHeaders
                        </tr>
                    </thead>

                    <tbody>
                        @if (Loading)
                        {
                            <tr>
                                <td colspan="100%">
                                    <UIRow Class="gap-05" FlexVariant="UIFlexVariant.AlignItemsCenter | UIFlexVariant.JustifyContentCenter">
                                        <UILoader/>
                                        <em>Loading ...</em>
                                    </UIRow>
                                </td>
                            </tr>
                        }
                        else
                        {
                            if (_rows.Length == 0)
                            {
                                if (NoItemsRowTemplate is not null)
                                {
                                    @NoItemsRowTemplate
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="100%">
                                            <UIRow Class="gap-05" FlexVariant="UIFlexVariant.AlignItemsCenter | UIFlexVariant.JustifyContentCenter">
                                                <label>No items</label>
                                            </UIRow>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                foreach (var item in _rows)
                                {
                                    <tr class="@($"tridenton-ui-datagrid-row{(item.Selected ? " selected" : string.Empty)}")"
                                        data-row-position="@item.Position"
                                        data-selected="@item.Selected">
                                        @switch (Variant)
                                        {
                                            case UIDatagridVariant.Select:
                                            case UIDatagridVariant.MultiSelect:
                                                <td class="tridenton-ui-datagrid-selection-column">
                                                    <InputCheckbox Value="@item.Selected"
                                                                   ValueExpression="() => item.Selected"
                                                                   ValueChanged="async (selected) => await OnItemSelectionChanged(item, selected)"/>
                                                </td>
                                                break;

                                            case UIDatagridVariant.Default:
                                                break;

                                            default:
                                                throw new InvalidEnumArgumentException(nameof(Variant));
                                        }

                                        @RowTemplate(item.Item)
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="tridenton-ui-datagrid-footer">

            </div>
        </UIColumn>
    </div>
</CascadingValue>

@code
{
    [Parameter, EditorRequired]
    public required string PreferencesKey { get; set; }
    
    [Parameter, EditorRequired]
    public UIDatagridVariant Variant { get; set; }
    
    [Parameter, EditorRequired]
    public required RenderFragment Actions { get; set; }
    
    [Parameter]
    public RenderFragment? Controls { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment TableHeaders { get; set; }
    
    [Parameter, EditorRequired]
    public required RenderFragment<T> RowTemplate { get; set; }
    
    [Parameter]
    public RenderFragment? Footer { get; set; }
    
    [Parameter, EditorRequired]
    public required Func<PaginatedRequest, Task<Result<PaginatedResponse<T>>>> Handler { get; set; }
    
    [Parameter]
    public RenderFragment? NoItemsRowTemplate { get; set; }
    
    [Parameter]
    public EventCallback<DatagridSelectionChangedEventArgs<T>> OnRowsSelected { get; set; }

    private readonly PaginatedRequest _request = new();

    private Error? _error;
    private PaginatedResponse<T>? _response;
    private UISelectable<T>[] _rows = [];

    private bool _allSelected;
    private bool _anySelected;

    private bool _settingsPopupVisible;
    
    private bool Loading => _response is null;

    private DatagridPreferences? _preferences;

    protected override async ValueTask OnFirstRenderAsync()
    {
        await base.OnFirstRenderAsync();

        await InitializePreferencesAsync();

        ApplyHeadersPreferences();
    
        StateHasChanged();
        
        await LoadItemsAsync();
    }

    private async ValueTask InitializePreferencesAsync()
    {
        if (_preferences is not null)
        {
            return;
        }

        var preferencesFromLocalStorage = await LocalStorage.GetAsync<DatagridPreferences>(PreferencesKey);

        if (preferencesFromLocalStorage is { Success: true, Value: not null })
        {
            _preferences = preferencesFromLocalStorage.Value;
            return;
        }

        _preferences = new();

        await LocalStorage.SetAsync(PreferencesKey, _preferences);
    }

    private async Task LoadItemsAsync()
    {
        _response = null;

        try
        {
            _request.Size = _preferences!.PageSize;
            
            var result = await Handler.Invoke(_request);

            if (result.Successful)
            {
                _response = result.Value;

                _rows = _response.Items
                    .Select((item, index) => new UISelectable<T>(item, index + 1))
                    .ToArray();
            }
            else
            {
                _error = result.Error;
                _response = new();
                _rows = [];
            }
        }
        catch (Exception exception)
        {
            _error = new InternalServerError("Datagrid.LoadFailed", exception.Message);
        }
        finally
        {
            StateHasChanged();
            
            ApplyCellsPreferences();
            
            StateHasChanged();
        }
    }

    private void ApplyHeadersPreferences()
    {
        for (var i = 0; i < Headers.Count; i++)
        {
            Headers[i].Visible = !_preferences!.HiddenHeadersIndices.Contains(i);
        }
    }

    private void ApplyCellsPreferences()
    {
        for (var i = 0; i < Columns.Count; i++)
        {
            Columns[i].Visible = !_preferences!.HiddenCellsIndices.Contains(i);
        }
    }
    
    private async Task SelectAllRowsAsync()
    {
        foreach (var row in _rows)
        {
            row.Selected = true;
        }
        
        await InvokeRowsSelectionAsync();
    }
    
    private async Task DeselectAllRowsAsync()
    {
        foreach (var row in _rows)
        {
            row.Selected = false;
        }
        
        await InvokeRowsSelectionAsync();
    }

    private async Task OnItemSelectionChanged(UISelectable<T> item, bool selected)
    {
        switch (Variant)
        {
            case UIDatagridVariant.Default:
                return;
                
            case UIDatagridVariant.Select:
                var alreadySelectedItem = _rows.FirstOrDefault(r => r.Selected);

                if (alreadySelectedItem is not null)
                {
                    if (alreadySelectedItem.Position != item.Position)
                    {
                        alreadySelectedItem.Selected = false;
                    }
                }

                break;
                
            case UIDatagridVariant.MultiSelect:
                break;
                
            default:
                throw new InvalidEnumArgumentException(nameof(Variant));
        }

        item.Selected = selected;

        await InvokeRowsSelectionAsync();
    }

    private async ValueTask InvokeRowsSelectionAsync()
    {
        var selectedRows = _rows
            .Where(r => r.Selected)
            .Select(r => r.Item)
            .ToArray();

        _allSelected = selectedRows.Length == _rows.Length;
        _anySelected = selectedRows.Length > 0;

        await OnRowsSelected.InvokeAsync(new DatagridSelectionChangedEventArgs<T>(selectedRows));
    }

    private void ChangeColumnVisibility(UIDatagridHeader header, bool visible)
    {
        var headerIndex = header.Position - 1;
        
        if (visible)
        {
            _preferences!.HiddenHeadersIndices.Remove(headerIndex);
        }
        else
        {
            _preferences!.HiddenHeadersIndices.Add(headerIndex);
        }
        
        for (var i = 0; i < Columns.Count; i++)
        {
            var currentColumn = i % Headers.Count;
            
            if (currentColumn != headerIndex)
            {
                continue;
            }

            if (visible)
            {
                _preferences.HiddenCellsIndices.Remove(i);
            }
            else
            {
                _preferences.HiddenCellsIndices.Add(i);
            }
        }
        
        // header.Visible = visible;
        
        // for (var i = 0; i < Columns.Count; i++)
        // {
        //     var currentColumn = i % Headers.Count;
        //     
        //     if (currentColumn != header.Position - 1)
        //     {
        //         continue;
        //     }
        //     
        //     Columns[i].Visible = visible;
        // }
    }

    private async Task SavePreferencesAsync()
    {
        await LocalStorage.SetAsync(PreferencesKey, _preferences!);

        ApplyHeadersPreferences();
        ApplyCellsPreferences();

        StateHasChanged();
        
        _settingsPopupVisible = false;
    }

    protected override string GetUIComponentClass() => "tridenton-ui-datagrid";
}